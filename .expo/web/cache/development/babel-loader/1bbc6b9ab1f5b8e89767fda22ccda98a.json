{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport { css } from \"../assets/css/Css\";\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nexport default function Home(navigation) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  var _useState5 = useState('flex'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      displayQR = _useState6[0],\n      setDisplayQR = _useState6[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  function handleBarCodeScanned(_ref) {\n    var type, data;\n    return _regeneratorRuntime.async(function handleBarCodeScanned$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            type = _ref.type, data = _ref.data;\n            setScanned(true);\n            alert(\"Bar code with type \" + type + \" and data \" + data + \" has been scanned!\");\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  ;\n  return React.createElement(View, null, React.createElement(BarCodeScanner, {\n    onBarCodeScanned: scanned ? undefined : function (value) {\n      return handleBarCodeScanned(value);\n    },\n    style: css.qr_code(displayQR)\n  }));\n}","map":{"version":3,"sources":["C:/Users/Fernando/Documents/UFOP/TCC2/visitsys_mobile/views/Home.js"],"names":["StatusBar","React","css","BarCodeScanner","Home","navigation","useState","hasPermission","setHasPermission","scanned","setScanned","displayQR","setDisplayQR","useEffect","requestPermissionsAsync","status","handleBarCodeScanned","type","data","alert","undefined","value","qr_code"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;;;AAEA,SAAQC,GAAR;AACA,SAASC,cAAT,QAA+B,sBAA/B;AAGA,eAAe,SAASC,IAAT,CAAcC,UAAd,EAA0B;AACvC,kBAA0CC,QAAQ,CAAC,IAAD,CAAlD;AAAA;AAAA,MAAOC,aAAP;AAAA,MAAsBC,gBAAtB;;AACA,mBAA8BF,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOG,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAAkCJ,QAAQ,CAAC,MAAD,CAA1C;AAAA;AAAA,MAAOK,SAAP;AAAA,MAAkBC,YAAlB;;AAEAC,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC0BV,cAAc,CAACW,uBAAf,EAD1B;;AAAA;AAAA;AACSC,cAAAA,MADT,yBACSA,MADT;AAECP,cAAAA,gBAAgB,CAACO,MAAM,KAAK,SAAZ,CAAhB;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAID,GALQ,EAKN,EALM,CAAT;;AAQA,WAAeC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsCC,YAAAA,IAAtC,QAAsCA,IAAtC,EAA4CC,IAA5C,QAA4CA,IAA5C;AACAR,YAAAA,UAAU,CAAC,IAAD,CAAV;AACAS,YAAAA,KAAK,yBAAuBF,IAAvB,kBAAwCC,IAAxC,wBAAL;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGC;AAED,SACE,oBAAC,IAAD,QAEE,oBAAC,cAAD;AACE,IAAA,gBAAgB,EAAET,OAAO,GAAGW,SAAH,GAAe,UAAAC,KAAK;AAAA,aAAEL,oBAAoB,CAACK,KAAD,CAAtB;AAAA,KAD/C;AAEE,IAAA,KAAK,EAAInB,GAAG,CAACoB,OAAJ,CAAYX,SAAZ;AAFX,IAFF,CADF;AAUD","sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\nimport React from 'react';\r\nimport { StyleSheet, Text, View, Button, Modal } from 'react-native';\r\nimport {css} from '../assets/css/Css'\r\nimport { BarCodeScanner } from 'expo-barcode-scanner';\r\n\r\n\r\nexport default function Home(navigation) {\r\n  const [hasPermission, setHasPermission] = useState(null);\r\n  const [scanned, setScanned] = useState(false);\r\n  const [displayQR, setDisplayQR] = useState('flex');\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\r\n      setHasPermission(status === 'granted');\r\n    })();\r\n  }, []);\r\n\r\n\r\n  async function handleBarCodeScanned({ type, data }){\r\n  setScanned(true);\r\n  alert(`Bar code with type ${type} and data ${data} has been scanned!`);\r\n  };\r\n\r\n  return (\r\n    <View>\r\n\r\n      <BarCodeScanner\r\n        onBarCodeScanned={scanned ? undefined : value=>handleBarCodeScanned(value)}\r\n        style = {css.qr_code(displayQR)}\r\n      />\r\n\r\n    </View>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}